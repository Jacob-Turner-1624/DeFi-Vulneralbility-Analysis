0.sol :
==== Dependence on tx.origin ====


SWC ID: 115


Severity: Low


Contract: BREBuy


Function name: fallback


PC address: 323


Estimated Gas Usage: 945 - 1370


Use of tx.origin as a part of authorization control.


The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.


--------------------


In file: /home/mythril/0.sol:159




re(msg.value == curConfig.singlePrice,"msg.value error");


        to




--------------------


Initial State:




Account: [CREATOR], balance: 0x40000000002, nonce:0, storage:{}


Account: [ATTACKER], balance: 0x1, nonce:0, storage:{}




Transaction Sequence:




Caller: [CREATOR], calldata: , value: 0x0


Caller: [ATTACKER], function: unknown, txdata: 0x, value: 0x0




==== Integer Arithmetic Bugs ====


SWC ID: 101


Severity: High


Contract: BREBuy


Function name: constructor


PC address: 365


Estimated Gas Usage: 94439 - 426157


The arithmetic operator can overflow.


It is possible to cause an integer overflow or underflow in the arithmetic operation. 


--------------------


In file: /home/mythril/0.sol:30




lse);


        curConfig




--------------------


Initial State:




Account: [CREATOR], balance: 0x1, nonce:0, storage:{}


Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}




Transaction Sequence:




Caller: [CREATOR], calldata: 000000000000000000000000000000000000000000000000000000000000000008, value: 0x0




==== Integer Arithmetic Bugs ====


SWC ID: 101


Severity: High


Contract: BREBuy


Function name: constructor


PC address: 540


Estimated Gas Usage: 94439 - 426157


The arithmetic operator can overflow.


It is possible to cause an integer overflow or underflow in the arithmetic operation. 


--------------------


In file: /home/mythril/0.sol:31




se);


        startNewGa




--------------------


Initial State:




Account: [CREATOR], balance: 0x1, nonce:0, storage:{}


Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}




Transaction Sequence:




Caller: [CREATOR], calldata: 000000000000000000000000000000000000000000000000000000000000000008, value: 0x0




==== Exception State ====


SWC ID: 110


Severity: Medium


Contract: BREBuy


Function name: addressArray(uint256)


PC address: 2674


Estimated Gas Usage: 1036 - 1131


An assertion violation was triggered.


It is possible to trigger an assertion violation. Note that Solidity assert() statements should only be used to check invariants. Review the transaction trace generated for this issue and either make sure your program logic is correct, or use require() instead of assert() if your goal is to constrain user inputs or enforce preconditions. Remember to validate inputs from both callers (for instance, via passed arguments) and callees (for instance, via return values).


--------------------


In file: /home/mythril/0.sol:18




addressArray = new address[](0);


               




--------------------


Initial State:




Account: [CREATOR], balance: 0x0, nonce:0, storage:{}


Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}




Transaction Sequence:




Caller: [CREATOR], calldata: , value: 0x0


Caller: [CREATOR], function: addressArray(uint256), txdata: 0x0f96cf34, value: 0x0




==== Dependence on tx.origin ====


SWC ID: 115


Severity: Low


Contract: BREBuy


Function name: changeConfig(uint32,uint256,uint8)


PC address: 3074


Estimated Gas Usage: 1153 - 1578


Use of tx.origin as a part of authorization control.


The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.


--------------------


In file: /home/mythril/0.sol:36




wner can call this function");


        _;


    }


    


     modifi




--------------------


Initial State:




Account: [CREATOR], balance: 0x1, nonce:0, storage:{}


Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}




Transaction Sequence:




Caller: [CREATOR], calldata: , value: 0x0


Caller: [ATTACKER], function: changeConfig(uint32,uint256,uint8), txdata: 0x61dbfc3f, value: 0x0




==== Integer Arithmetic Bugs ====


SWC ID: 101


Severity: High


Contract: BREBuy


Function name: changeConfig(uint32,uint256,uint8)


PC address: 3405


Estimated Gas Usage: 26435 - 108510


The arithmetic operator can overflow.


It is possible to cause an integer overflow or underflow in the arithmetic operation. 


--------------------


In file: /home/mythril/0.sol:97




 }


    }


    


    funct




--------------------


Initial State:




Account: [CREATOR], balance: 0x51808210b100934e, nonce:0, storage:{}


Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}




Transaction Sequence:




Caller: [CREATOR], calldata: , value: 0x0


Caller: [CREATOR], function: changeConfig(uint32,uint256,uint8), txdata: 0x61dbfc3f00000000000000000000000000000000000000000000000000000000080100041001, value: 0x0




==== Integer Arithmetic Bugs ====


SWC ID: 101


Severity: High


Contract: BREBuy


Function name: changeConfig(uint32,uint256,uint8)


PC address: 3428


Estimated Gas Usage: 26435 - 108510


The arithmetic operator can overflow.


It is possible to cause an integer overflow or underflow in the arithmetic operation. 


--------------------


In file: /home/mythril/0.sol:102




      gameIndex++;


    




--------------------


Initial State:




Account: [CREATOR], balance: 0x51808210b100934e, nonce:0, storage:{}


Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}




Transaction Sequence:




Caller: [CREATOR], calldata: , value: 0x0


Caller: [CREATOR], function: changeConfig(uint32,uint256,uint8), txdata: 0x61dbfc3f00000000000000000000000000000000000000000000000000000000080100041001, value: 0x0




==== Dependence on tx.origin ====


SWC ID: 115


Severity: Low


Contract: BREBuy


Function name: updateLock(bool)


PC address: 3601


Estimated Gas Usage: 1161 - 1586


Use of tx.origin as a part of authorization control.


The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.


--------------------


In file: /home/mythril/0.sol:36




wner can call this function");


        _;


    }


    


     modifi




--------------------


Initial State:




Account: [CREATOR], balance: 0x0, nonce:0, storage:{}


Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}




Transaction Sequence:




Caller: [CREATOR], calldata: , value: 0x0


Caller: [CREATOR], function: updateLock(bool), txdata: 0xa1f91057, value: 0x0




==== Dependence on tx.origin ====


SWC ID: 115


Severity: Low


Contract: BREBuy


Function name: transferOwnership(address)


PC address: 4128


Estimated Gas Usage: 1183 - 1608


Use of tx.origin as a part of authorization control.


The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.


--------------------


In file: /home/mythril/0.sol:36




wner can call this function");


        _;


    }


    


     modifi




--------------------


Initial State:




Account: [CREATOR], balance: 0x0, nonce:0, storage:{}


Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}




Transaction Sequence:




Caller: [CREATOR], calldata: , value: 0x0


Caller: [CREATOR], function: transferOwnership(address), txdata: 0xf2fde38b, value: 0x0




==== Dependence on tx.origin ====


SWC ID: 115


Severity: Low


Contract: BREBuy


Function name: updateLock(bool)


PC address: 4999


Estimated Gas Usage: 9666 - 31411


Use of tx.origin as a part of authorization control.


The tx.origin environment variable has been found to influence a control flow decision. Note that using tx.origin as a security control might cause a situation where a user inadvertently authorizes a smart contract to perform an action on their behalf. It is recommended to use msg.sender instead.


--------------------


In file: /home/mythril/0.sol:36




wner can call this function");


        _;


    }


    


     modifi




--------------------


Initial State:




Account: [CREATOR], balance: 0x1, nonce:0, storage:{}


Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}




Transaction Sequence:




Caller: [CREATOR], calldata: , value: 0x0


Caller: [CREATOR], function: updateLock(bool), txdata: 0xa1f9105701, value: 0x0